from __future__ import absolute_import
from __future__ import print_function

import pdb
from typing import Dict
import os
# import pdb
import sys

if 'SUMO_HOME' in os.environ:
    tools = os.path.join(os.environ['SUMO_HOME'], 'tools')
    sys.path.append(tools)
else:
    sys.exit("Please declare the environment variable 'SUMO_HOME'")
import traci
import sumolib
from env.generate_sumo import GenSumo
from env.gen_event import Event
from c3sim.algorithm.control_register import ControlRegister
from c3sim.algorithm.integrate_control import IntControl
from c3sim.algorithm.information import Info
from c3sim.algorithm.feed_back_control import FeedBack
# from c3sim.eval.graphpresent import GraphPresent


class SimTraci:
    # class CAV:
    #     def __init__(self, id, token, credit):
    #         self.id = id
    #         self.token = token
    #         self.credit = credit

    def __init__(self, **kwargs):
        # options, if sumo-gui, random_net, use control, use integrate control, plot graph
        self.anime_variable = kwargs['option']['gui']
        self.random_net = kwargs['option']['random_net']
        self.control_option = kwargs['option']['control_option']
        self.integrate_control = kwargs['option']['c3control']
        self.graph_plot = kwargs['option']['graph']
        # network data path
        self.gen_path = kwargs['network']
        self.data_dir = None
        # event data
        self.event = kwargs['event']
        # network settings for a random network
        self.network_setting = kwargs['network_setting']
        # simulation settings
        self.simulation_setting = kwargs['simulation_setting']
        # controller variable
        self.controller_scale = kwargs['controller']
        # sim step initial
        self.sim_step = 0

    def sumo_run(self, **kwargs):
        event = kwargs.get('event', None)
        control_register = kwargs.get('control_register', None)
        feed_back_control = kwargs.get('feedback', None)
        int_control = kwargs.get('int_control', None)
        info = kwargs.get('info', None)
        controller_list = control_register.register()
        while traci.simulation.getMinExpectedNumber() > 0:
            traci.simulationStep()
            # pdb.set_trace()
            if event:
                event.event_loger(self.sim_step)
            if control_register:
                # controller_list = control_register.register()
                # if int_control:
                #     control_graph = info.info_trans(controller_list)
                #     controller_list = int_control.integrate_effort(control_graph)
                feed_back_control.control_apply(controller_list, self.sim_step)
            # if self.graph_plot:
            #     if self.simstep % 200 == 0:
            #         GraphPresent.draw_physic()
            #         self.draw_control()
            self.sim_step += 1
        traci.close()
        sys.stdout.flush()

    def sumo_start(self):
        if self.anime_variable:
            sumo_binary = sumolib.checkBinary('sumo-gui')  # animation
        else:
            sumo_binary = sumolib.checkBinary('sumo')  # no animation
        sim_path = (self.data_dir / 'example.sumocfg').absolute()
        try:
            traci.start([sumo_binary, "-c", sim_path, "--step-length", '0.1'])
        except UserWarning:
            sys.exit("No simulation data")

    def sumo_initialize(self) -> Dict:
        obj_dict = dict()
        event = None
        # pdb.set_trace()
        if self.event:
            event = Event(self.event)
            obj_dict['event'] = event
        if self.control_option:
            controller_register = ControlRegister()
            feed_back_control = FeedBack(self.controller_scale)
            obj_dict['feedback'] = feed_back_control
            obj_dict['control_register'] = controller_register
        if self.integrate_control:
            information = Info(event)
            int_control = IntControl()
            obj_dict['int_control'] = int_control
            obj_dict['info'] = information
        return obj_dict

    def sumo_generate(self):
        if self.random_net:
            self.data_dir = self.gen_path / 'random_net'
            folder = os.path.exists(self.data_dir)
            if not folder:
                os.mkdir(self.data_dir)
            gen_data = GenSumo(self.data_dir, self.network_setting, self.simulation_setting)
            gen_data.generate_sumo()
        else:
            self.data_dir = self.gen_path / 'data'

    def sim_run(self):
        self.sumo_generate()
        obj_dict = self.sumo_initialize()
        # pdb.set_trace()
        self.sumo_start()
        self.sumo_run(**obj_dict)
